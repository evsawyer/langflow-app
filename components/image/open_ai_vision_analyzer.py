# Save this code as a Python file (e.g., openai_vision_component.py)
# and import it into your LangFlow project.

from langflow.custom import Component
# Using newer IO types from Langflow >= 1.0
from langflow.io import Output, SecretStrInput, StrInput, MessageTextInput, DataInput
from langflow.schema import Message, Data

# Removed: from langflow.field_typing import LanguageModel, Secret

import os
from openai import OpenAI, APIError, AuthenticationError, RateLimitError
import logging
import asyncio
from typing import List
import json

# Setup basic logging
logger = logging.getLogger(__name__)

class OpenAiVisionAnalyzer(Component):
    """
    Analyzes one or more images from URLs provided within a Data object using an OpenAI vision model.
    """
    display_name = "OpenAI Vision Analyzer (Data Input)"
    description = "Accepts a Data object containing image URLs, sends them with instructions to an OpenAI vision model, and returns the response."
    documentation: str = (
        "Inputs:\n"
        "- Image Data: A Langflow Data object containing a list of image URLs under the key 'urls' (e.g., Data(urls=['url1', 'url2'])).\n"
        "- OpenAI API Key: Your secret OpenAI API key.\n"
        "- Instructions: Text prompt telling the model what to do with the images.\n\n"
        "Outputs:\n"
        "- OpenAI Response: The text generated by the model."
    )
    icon = "Images"
    name = "OpenAiMultiVisionAnalyzerData"

    inputs = [
        StrInput(
            name="image_data",
            display_name="Image URLs (space-separated)",
            info="A string containing one or more image URLs separated by single spaces.",
            required=True,
            tool_mode=True,
        ),
        SecretStrInput(
            name="openai_api_key",
            display_name="OpenAI API Key",
            info="Your secret OpenAI API key.",
            required=True
        ),
        MessageTextInput(
            name="instructions",
            display_name="Instructions",
            info="Text prompt telling the model what to analyze or extract from the images.",
            value="Describe these images in detail. Note any differences.",
            required=True,
            tool_mode=True,
        ),
         StrInput(
            name="model_name",
            display_name="Model Name",
            info="The OpenAI vision model to use (e.g., gpt-4o-mini, gpt-4o, gpt-4-turbo).",
            value="gpt-4o-mini",
            required=True
        ),
        StrInput(
            name="max_tokens",
            display_name="Max Tokens (Optional)",
            info="Maximum number of tokens to generate in the response.",
            value="300",
            required=False,
            advanced=True
        )
    ]

    outputs = [
        Output(display_name="OpenAI Response", name="openai_response", method="analyze_images"),
    ]

    def _run_openai_sync(self, client, model_name, messages, max_tokens_int):
        """Synchronous helper to run the API call, intended for asyncio.to_thread."""
        return client.chat.completions.create(
            model=model_name,
            messages=messages,
            max_tokens=max_tokens_int
        )

    async def analyze_images(self) -> Message:
        """
        Extracts image URLs from the input string, sends them and instructions to OpenAI, and returns the response.
        """
        image_data_input: str = self.image_data # Input is now expected to be a string
        api_key_input = self.openai_api_key
        instructions: str = self.instructions
        model_name: str = self.model_name
        max_tokens_str: str = self.max_tokens
        output_text: str = ""
        image_urls: List[str] = [] # Keep original initialization

        # --- Try to extract URLs ---
        extracted_urls = None
        if isinstance(image_data_input, str):
             # Split the string by spaces and filter out any empty strings resulting from multiple spaces
             extracted_urls = [url for url in image_data_input.split(' ') if url]
             logger.info(f"Received image_data as a string. Split into {len(extracted_urls)} potential URL(s).")
        else:
             # This case should technically not happen if the input type is correctly enforced as StrInput,
             # but it's included for robustness.
             self.status = f"Error: Input 'Image URLs' has unexpected type: {type(image_data_input)}."
             logger.error(self.status)
             return Message(text="")

        # --- Validation of extracted URLs ---
        # Assign to image_urls *after* extraction and *before* validation
        # (The logic here can remain largely the same as before, it validates the extracted_urls list)
        if isinstance(extracted_urls, list):
             image_urls = extracted_urls
        else:
             # If extraction somehow failed or didn't result in a list
             image_urls = []

        if not image_urls: # Check if the list is empty after splitting and filtering
            self.status = "Error: Could not find any URLs in the input string."
            logger.error(self.status + f" Raw input string: '{image_data_input}'")
            return Message(text="")

        # --- Continue with URL content validation ---
        if not all(url and isinstance(url, str) for url in image_urls):
             # This validation is still relevant
             self.status = "Error: The extracted list contains invalid entries (non-strings)."
             logger.error(self.status + f" Content: {image_urls}")
             return Message(text="")

        # --- Continue with API Key, Instructions, Model Name validation ---
        actual_api_key = api_key_input.load() if hasattr(api_key_input, 'load') else api_key_input
        if not actual_api_key: # Check after trying to load/access the value
            self.status = "Error: OpenAI API Key is missing or empty."
            logger.error(self.status)
            return Message(text="")
        if not instructions:
            self.status = "Error: Instructions are missing."
            logger.error(self.status)
            return Message(text="")
        if not model_name:
            self.status = "Error: Model Name is missing."
            logger.error(self.status)
            return Message(text="")

        try:
            max_tokens_int = int(max_tokens_str) if max_tokens_str else None
        except ValueError:
            self.status = "Warning: Invalid 'Max Tokens' value, ignoring."
            logger.warning(f"Invalid max_tokens value '{max_tokens_str}', proceeding without it.")
            max_tokens_int = None

        self.status = f"Preparing request for {model_name}..."
        num_images = len(image_urls)
        logger.info(f"Sending request to OpenAI model '{model_name}' for {num_images} image(s). First URL: {image_urls[0]}")

        try:
            client = OpenAI(api_key=actual_api_key)

            content_list = [{"type": "text", "text": instructions}]
            for url in image_urls:
                content_list.append({
                    "type": "image_url",
                    "image_url": {"url": url}
                })

            messages = [{"role": "user", "content": content_list}]

            self.status = f"Sending request for {num_images} image(s) to {model_name}..."

            response = await asyncio.to_thread(
                self._run_openai_sync, client, model_name, messages, max_tokens_int
            )

            if response.choices and response.choices[0].message:
                output_text = response.choices[0].message.content or ""
                self.status = "Success: Received response from OpenAI."
                logger.info(f"OpenAI response received successfully (Length: {len(output_text)}).")
            else:
                 self.status = "Warning: OpenAI response structure unexpected or empty."
                 logger.warning(f"OpenAI response was empty or had unexpected structure: {response}")

        except AuthenticationError as auth_err:
             self.status = f"Authentication Error: Check your OpenAI API Key. ({auth_err})"
             logger.error(self.status)
        except RateLimitError as rate_err:
             self.status = f"Rate Limit Error: You may have exceeded your OpenAI quota or rate limit. ({rate_err})"
             logger.error(self.status)
        except APIError as api_err:
             self.status = f"OpenAI API Error: {api_err}"
             logger.error(self.status)
        except Exception as e:
            self.status = f"Error: An unexpected error occurred while contacting OpenAI. {type(e).__name__}: {e}"
            logger.error(self.status, exc_info=True)

        return Message(text=output_text)
